{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\LENOVO\\\\Desktop\\\\Project 1\\\\src\\\\App.js\";\nimport Header from \"./components/Header/Header\";\nimport ResultsTable from \"./components/ResultsTable/ResultsTable\";\nimport UserInput from \"./components/UserInput/UserInput\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  var calculateHandler = function calculateHandler(userInput) {\n    // Should be triggered when form is submitted\n    // You might not directly want to bind it to the submit event on the form though...\n\n    var yearlyData = []; // per-year results\n\n    var currentSavings = +userInput[\"current-savings\"]; // feel free to change the shape of this input object!\n    var yearlyContribution = +userInput[\"yearly-contribution\"]; // as mentioned: feel free to change the shape...\n    var expectedReturn = +userInput[\"expected-return\"] / 100;\n    var duration = +userInput[\"duration\"];\n\n    // The below code calculates yearly results (total savings, interest etc)\n    for (var i = 0; i < duration; i++) {\n      var yearlyInterest = currentSavings * expectedReturn;\n      currentSavings += yearlyInterest + yearlyContribution;\n      yearlyData.push({\n        // feel free to change the shape of the data pushed to the array!\n        year: i + 1,\n        yearlyInterest: yearlyInterest,\n        savingsEndOfYear: currentSavings,\n        yearlyContribution: yearlyContribution\n      });\n    }\n\n    // do something with yearlyData ...\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(UserInput, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ResultsTable, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n}\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Header","ResultsTable","UserInput","jsxDEV","_jsxDEV","App","calculateHandler","userInput","yearlyData","currentSavings","yearlyContribution","expectedReturn","duration","i","yearlyInterest","push","year","savingsEndOfYear","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/LENOVO/Desktop/Project 1/src/App.js"],"sourcesContent":["import Header from \"./components/Header/Header\";\r\nimport ResultsTable from \"./components/ResultsTable/ResultsTable\";\r\nimport UserInput from \"./components/UserInput/UserInput\";\r\n\r\nfunction App() {\r\n  const calculateHandler = (userInput) => {\r\n    // Should be triggered when form is submitted\r\n    // You might not directly want to bind it to the submit event on the form though...\r\n\r\n    const yearlyData = []; // per-year results\r\n\r\n    let currentSavings = +userInput[\"current-savings\"]; // feel free to change the shape of this input object!\r\n    const yearlyContribution = +userInput[\"yearly-contribution\"]; // as mentioned: feel free to change the shape...\r\n    const expectedReturn = +userInput[\"expected-return\"] / 100;\r\n    const duration = +userInput[\"duration\"];\r\n\r\n    // The below code calculates yearly results (total savings, interest etc)\r\n    for (let i = 0; i < duration; i++) {\r\n      const yearlyInterest = currentSavings * expectedReturn;\r\n      currentSavings += yearlyInterest + yearlyContribution;\r\n      yearlyData.push({\r\n        // feel free to change the shape of the data pushed to the array!\r\n        year: i + 1,\r\n        yearlyInterest: yearlyInterest,\r\n        savingsEndOfYear: currentSavings,\r\n        yearlyContribution: yearlyContribution\r\n      });\r\n    }\r\n\r\n    // do something with yearlyData ...\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Header/>\r\n      <UserInput/>\r\n      <ResultsTable/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":";AAAA,OAAOA,MAAM,MAAM,4BAA4B;AAC/C,OAAOC,YAAY,MAAM,wCAAwC;AACjE,OAAOC,SAAS,MAAM,kCAAkC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzD,SAASC,GAAGA,CAAA,EAAG;EACb,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAgBA,CAAIC,SAAS,EAAK;IACtC;IACA;;IAEA,IAAMC,UAAU,GAAG,EAAE,CAAC,CAAC;;IAEvB,IAAIC,cAAc,GAAG,CAACF,SAAS,CAAC,iBAAiB,CAAC,CAAC,CAAC;IACpD,IAAMG,kBAAkB,GAAG,CAACH,SAAS,CAAC,qBAAqB,CAAC,CAAC,CAAC;IAC9D,IAAMI,cAAc,GAAG,CAACJ,SAAS,CAAC,iBAAiB,CAAC,GAAG,GAAG;IAC1D,IAAMK,QAAQ,GAAG,CAACL,SAAS,CAAC,UAAU,CAAC;;IAEvC;IACA,KAAK,IAAIM,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGD,QAAQ,EAAEC,CAAC,EAAE,EAAE;MACjC,IAAMC,cAAc,GAAGL,cAAc,GAAGE,cAAc;MACtDF,cAAc,IAAIK,cAAc,GAAGJ,kBAAkB;MACrDF,UAAU,CAACO,IAAI,CAAC;QACd;QACAC,IAAI,EAAEH,CAAC,GAAG,CAAC;QACXC,cAAc,EAAEA,cAAc;QAC9BG,gBAAgB,EAAER,cAAc;QAChCC,kBAAkB,EAAEA;MACtB,CAAC,CAAC;IACJ;;IAEA;EACF,CAAC;;EAED,oBACEN,OAAA;IAAAc,QAAA,gBACEd,OAAA,CAACJ,MAAM;MAAAmB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,eACTlB,OAAA,CAACF,SAAS;MAAAiB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,eACZlB,OAAA,CAACH,YAAY;MAAAkB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACZ,CAAC;AAEV;AAACC,EAAA,GAnCQlB,GAAG;AAqCZ,eAAeA,GAAG;AAAC,IAAAkB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}